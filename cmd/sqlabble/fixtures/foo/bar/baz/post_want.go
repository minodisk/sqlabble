// Code generated by sqlabble, DO NOT EDIT.
package baz

import (
	"database/sql"
	"strings"

	"github.com/sqlabble/sqlabble"
	"github.com/sqlabble/sqlabble/stmt"
)

// PostDB Post table
type PostDB struct {
	Table                stmt.Table
	TableAlias           stmt.TableAlias
	PostIDColumn         stmt.Column
	PostIDColumnAlias    stmt.ColumnAlias
	ArticleIDColumn      stmt.Column
	ArticleIDColumnAlias stmt.ColumnAlias
	Article              ArticleDB
}

// NewPostDB Create a/an PostDB
func NewPostDB(aliases ...string) PostDB {
	alias := strings.Join(aliases, ".")
	if alias == "" {
		alias = "posts"
	}
	return PostDB{
		Table:                stmt.NewTable("posts"),
		TableAlias:           stmt.NewTable("posts").As(alias),
		PostIDColumn:         stmt.NewTableAlias(alias).Column("post_id"),
		PostIDColumnAlias:    stmt.NewTableAlias(alias).Column("post_id").As(strings.Join(append(aliases, "PostID"), ".")),
		ArticleIDColumn:      stmt.NewTableAlias(alias).Column("article_id"),
		ArticleIDColumnAlias: stmt.NewTableAlias(alias).Column("article_id").As(strings.Join(append(aliases, "ArticleID"), ".")),
		Article:              NewArticleDB(append(aliases, "Article")...),
	}
}

// Register -
func (p PostDB) Register(mapper map[string]interface{}, dist *Post, aliases ...string) {
	mapper[strings.Join(append(aliases, "PostID"), ".")] = &dist.PostID
	mapper[strings.Join(append(aliases, "ArticleID"), ".")] = &dist.ArticleID
	p.Article.Register(mapper, &dist.Article, append(aliases, "Article")...)
}

// Columns -
func (p PostDB) Columns() []stmt.Column {
	return []stmt.Column{
		p.PostIDColumn,
		p.ArticleIDColumn,
	}
}

// ColumnAliases -
func (p PostDB) ColumnAliases() []stmt.ColumnAlias {
	aliases := []stmt.ColumnAlias{
		p.PostIDColumnAlias,
		p.ArticleIDColumnAlias,
	}
	aliases = append(aliases, p.Article.ColumnAliases()...)
	return aliases
}

// Selectors -
func (p PostDB) Selectors() []stmt.ValOrColOrAliasOrFuncOrSubOrFormula {
	as := p.ColumnAliases()
	is := make([]stmt.ValOrColOrAliasOrFuncOrSubOrFormula, len(as))
	for i, a := range as {
		is[i] = a
	}
	return is
}

// Map -
func (p PostDB) Map(rows *sql.Rows) ([]Post, error) {
	cols, err := rows.Columns()
	if err != nil {
		return nil, err
	}
	dist := []Post{}
	for rows.Next() {
		mapper := make(map[string]interface{})
		di := Post{}
		p.Register(mapper, &di)
		refs := make([]interface{}, len(cols))
		for i, c := range cols {
			refs[i] = mapper[c]
		}
		if err := rows.Scan(refs...); err != nil {
			return nil, err
		}
		dist = append(dist, di)
	}
	return dist, nil
}

// QueryOne Select single record
func (p PostDB) QueryOne(sess *sqlabble.Session, st stmt.Statement) (Post, error) {
	query, values := sess.Builder.Build(st)
	rows, err := sess.Query(query, values...)
	if err != nil {
		return Post{}, err
	}
	ms, err := p.Map(rows)
	if err != nil {
		return Post{}, err
	}
	if len(ms) == 0 {
		return Post{}, sqlabble.NewErrRecordNotFound(p.Table.Name)
	}
	if len(ms) > 1 {
		return Post{}, sqlabble.NewErrFoundMultipleRecords(p.Table.Name)
	}
	return ms[0], nil
}

// Count count records
func (p PostDB) Count(sess *sqlabble.Session, op stmt.ComparisonOrLogicalOperation) (int64, error) {
	var query string
	var values []interface{}

	fc := sqlabble.Select(sqlabble.Count(sqlabble.Wildcard)).From(p.Table)
	if op != nil {
		query, values = sess.Builder.Build(fc.Where(op))
	} else {
		query, values = sess.Builder.Build(fc)
	}
	rows, err := sess.Query(query, values...)
	if err != nil {
		return 0, err
	}

	var count int64
	for rows.Next() {
		err := rows.Scan(&count)
		if err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Query select some records
func (p PostDB) Query(sess *sqlabble.Session, st stmt.Statement) ([]Post, error) {
	query, values := sess.Builder.Build(st)
	rows, err := sess.Query(query, values...)
	if err != nil {
		return []Post{}, err
	}
	ms, err := p.Map(rows)
	if err != nil {
		return []Post{}, err
	}

	return ms, nil
}

// Exec execute a query
func (p PostDB) Exec(sess *sqlabble.Session, st stmt.Statement) (sql.Result, error) {
	query, values := sess.Builder.Build(st)
	result, err := sess.Exec(query, values...)
	if err != nil {
		return nil, err
	}
	return result, nil
}
